#include <termios.h>
#include <unistd.h>
#include <fcntl.h>
#include <iostream>
#include <queue>
#include <cstring>
#include <string>
#include <fstream>
#include <sstream>
#include <vector>
#include <ros/ros.h>	// 包含ROS的头文件
#include <cmath>
#include "gps_pub/imu_gps.h"	//ros消息中的String类型
#include "include/serial_port.h"
#include "include/protocol.h"
#include "include/serialPort.h"

using namespace std;

string testData(string portName){
    char buff[1100];
    string buf1;
    serialPort sp(9600,0,8,1,'N');
    sp.serialPortOpen(portName.c_str());
    int count=0;
    bool findFlag=false;
    while(count < 9) {
        //read(sp.cFd,buff,sizeof(buff));
        sp.serialPortRead(buff,sizeof(buff));
        buf1 = buff;
        if(buf1.find("GPGGA") != string::npos){
            findFlag = true;
        }
        count++;
    };
    if(findFlag){
        sp.serialPortClose();
        return portName;
    }else{
        return "";
    }
}

string testPort(){
    queue<string> possible;
    string rightDevice;
    string portName[10] = {"/dev/ttyUSB0", "/dev/ttyUSB1", "/dev/ttyUSB2", "/dev/ttyUSB3", "/dev/ttyUSB4",
                     "/dev/ttyUSB5", "/dev/ttyUSB6", "/dev/ttyUSB7", "/dev/ttyUSB8", "/dev/ttyUSB9", };
    bool testPassFlag = false;
    while(ros::ok()){
        sleep(1);
        for(auto i = 0; i<10; i++){
            if(access(portName[i].c_str(),0) == 0){
                possible.push(portName[i]);
                cout << portName[i] <<" exist!" << endl;
            }
        }
        while(!possible.empty()){
            sleep(1);
            cout << "正在检测" << endl;
            //test function,ok return true or return false
            //delete queue
            cout << possible.front() << endl;
            rightDevice = testData(possible.front());
            possible.pop();

            if(rightDevice != ""){
                cout << "ok. right device is " << rightDevice << " run main function" << endl;
                testPassFlag = true;
                break;
            }
        }
        if(testPassFlag){
            return rightDevice;
        }else{
            cout << "no right device" << endl;
            continue;
        }
    }
}

int main(int argc, char** argv) {
	ros::init(argc, argv, "gps_node");	//初始化节点
	ros::NodeHandle n;
	ros::Publisher chatter_pub = n.advertise<gps_pub::imu_gps>("gps_imu", 1000);

	/*global parameters*/
	struct termios options;
	char recvBuf[1];
	const char* port = testPort().c_str();
	int fd;
	string requestData1("");
	string requestData2("");
	string buff("");

	while(ros::ok()){	//the largest circle
		/*open serial port circle*/
		while(ros::ok()){
			if(serialPortOpen(fd,port)){
				break;
			}
			sleep(1);
		}
		/*set serial port*/
		if (tcgetattr(fd,&options) != 0){
			close(fd);
			break;
		}
		if(!serialPortSet(fd,115200,0,8,1,'N')){	//(fd,baudrate,flowcontrol,databits,stopbit,parity)
			cout << "serialPortSet Error!" << endl;
		}
		/*read serial port*/
		ros::Rate loop_rate(10);
		while(ros::ok()){
			read(fd,recvBuf,1);
			if (tcgetattr(fd,&options) != 0){
				// perror("设备拔出");
				close(fd);
				break;
			}
			buff += recvBuf[0];
			if(*recvBuf == '\n'){
				requestData1 = buff;
				buff.clear();
				if(findPacketHead(requestData1)){
					requestData2 = fetchAFrame(requestData1);
					if(bccCheck(requestData2)){
						extractData(requestData2);		
						//发布消息
						gps_pub::imu_gps msg;
						msg.head            = head;
						msg.timeUTC         = timeUTC;
						msg.latitude        = latitude;
						msg.northORsouth    = northORsouth;
						msg.longitude       = longitude;
						msg.eastORwest      = eastORwest;
						msg.GPSstatus       = GPSstatus;
						msg.satelliteNum    = satelliteNum;
						msg.HDOP            = HDOP;
						msg.altitude        = altitude;
						msg.altitudeUnit    = altitudeUnit;
						msg.geiod           = geiod;
						msg.geiodUnit       = geiodUnit;
						msg.rtkAge          = rtkAge;
						msg.rtkID           = rtkID;
						msg.BCC             = BCC;
						ROS_INFO("%s %s %s %s", msg.GPSstatus.c_str(),msg.longitude.c_str(),
						 						msg.latitude.c_str(),msg.altitude.c_str());
						chatter_pub.publish(msg);
						ros::spinOnce();
						loop_rate.sleep();
					}
				}		
			}					
		}
		serialPortClose(fd);
	}
	return 0;
}
